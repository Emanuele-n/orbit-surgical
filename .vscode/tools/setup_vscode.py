import argparse
import os
import pathlib

WS_DIR = pathlib.Path(__file__).parents[2]


def overwrite_python_default_interpreter_path(ws_settings: str, isaac_sim_dir: str) -> str:
    """Overwrite the python.defaultInterpreterPath in the workspace settings file.
    This function assumes the initial and new paths are known and structured predictably.
    """
    old_path_string = '"python.defaultInterpreterPath": ".*?"'  # Adjust this if the actual value might differ
    new_path_string = f'"python.defaultInterpreterPath": "{os.path.join(isaac_sim_dir, "python")}"'
    # Normalize path to ensure backslashes are handled correctly
    new_path_string = new_path_string.replace("\\", "\\\\")
    settings = ws_settings.replace(old_path_string, new_path_string)
    return settings


def overwrite_python_analysis_extra_paths(ws_settings: str, isaac_sim_dir: str) -> str:
    """Replace paths in python.analysis.extraPaths in the workspace settings file.
    We avoid regex to prevent issues with backslashes in paths.
    """
    # Assuming you know the structure of the settings and what to replace
    old_paths_string = '"python.analysis.extraPaths": [.*?]'  # Adjust this pattern as needed
    new_paths = [os.path.join(isaac_sim_dir, "path1"), os.path.join(isaac_sim_dir, "path2")]  # Example paths
    new_paths_string = '"python.analysis.extraPaths": [' + ", ".join(f'"{path}"' for path in new_paths) + "]"
    # Normalize paths
    new_paths_string = new_paths_string.replace("\\", "\\\\")
    settings = ws_settings.replace(old_paths_string, new_paths_string)
    return settings


def header_msg(src: str):
    return (
        "// This file is a template and is automatically generated by the setup_vscode.py script.\n"
        "// Do not edit this file directly.\n"
        "// \n"
        f"// Generated from: {src}\n"
    )


def main():
    parser = argparse.ArgumentParser(description="Setup VSCode.")
    parser.add_argument("--isaacsim_path", type=str, help="The absolute path to your Isaac Sim installation.")
    args = parser.parse_args()

    settings_template_path = os.path.normpath(os.path.join(WS_DIR, ".vscode", "tools", "settings.template.json"))
    if not os.path.exists(settings_template_path):
        raise FileNotFoundError(f"Could not find the Isaac Lab template settings file: {settings_template_path}")

    with open(settings_template_path) as f:
        settings_template = f.read()

    isaacsim_path = args.isaacsim_path
    settings = overwrite_python_analysis_extra_paths(settings_template, isaacsim_path)
    settings = overwrite_python_default_interpreter_path(settings, isaacsim_path)
    settings = header_msg(settings_template_path) + settings

    settings_path = os.path.normpath(os.path.join(WS_DIR, ".vscode", "settings.json"))
    with open(settings_path, "w") as f:
        f.write(settings)


if __name__ == "__main__":
    main()
